"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const path = require("path");
const fs = require("fs-extra");
const awscli_compatible_1 = require("../../../lib/api/aws-auth/awscli-compatible");
describe('AwsCliCompatible.region', () => {
    beforeEach(() => {
        // make sure we don't mistakenly point to an unrelated file
        process.env.AWS_CONFIG_FILE = '/dev/null';
        process.env.AWS_SHARED_CREDENTIALS_FILE = '/dev/null';
        // these take precedence over the ini files so we need to disable them for
        // the test to invoke the right function
        delete process.env.AWS_REGION;
        delete process.env.AMAZON_REGION;
        delete process.env.AWS_DEFAULT_REGION;
        delete process.env.AMAZON_DEFAULT_REGION;
    });
    test('default region can be specified in config', async () => {
        const config = `
  [default]
  region=region-in-config
  `;
        await expect(region({ configFile: config })).resolves.toBe('region-in-config');
    });
    test('default region can be specified in credentials', async () => {
        const creds = `
  [default]
  region=region-in-credentials
  `;
        await expect(region({ credentialsFile: creds })).resolves.toBe('region-in-credentials');
    });
    test('profile region can be specified in config', async () => {
        const config = `
  [profile user1]
  region=region-in-config
  `;
        await expect(region({ configFile: config, profile: 'user1' })).resolves.toBe('region-in-config');
    });
    test('profile region can be specified in credentials', async () => {
        const creds = `
  [user1]
  region=region-in-credentials
  `;
        await expect(region({ credentialsFile: creds, profile: 'user1' })).resolves.toBe('region-in-credentials');
    });
    test('with profile | profile-region-in-credentials is priority 1', async () => {
        const config = `
  [default]
  region=default-region-in-config

  [profile user]
  region=profile-region-in-config

  `;
        const creds = `
  [default]
  region=default-region-in-credentials

  [user]
  region=profile-region-in-credentials
  `;
        await expect(region({ credentialsFile: creds, configFile: config, profile: 'user' })).resolves.toBe('profile-region-in-credentials');
    });
    test('with profile | profile-region-in-config is priority 2', async () => {
        const config = `
  [default]
  region=default-region-in-config

  [profile user]
  region=profile-region-in-config

  `;
        const creds = `
  [default]
  region=default-region-in-credentials

  [user]
  `;
        await expect(region({ credentialsFile: creds, configFile: config, profile: 'user' })).resolves.toBe('profile-region-in-config');
    });
    test('with profile | default-region-in-credentials is priority 3', async () => {
        const config = `
  [default]
  region=default-region-in-config

  [profile user]

  `;
        const creds = `
  [default]
  region=default-region-in-credentials

  [user]
  `;
        await expect(region({ credentialsFile: creds, configFile: config, profile: 'user' })).resolves.toBe('default-region-in-credentials');
    });
    test('with profile | default-region-in-config is priority 4', async () => {
        const config = `
  [default]
  region=default-region-in-config

  [profile user]

  `;
        const creds = `
  [default]

  [user]
  `;
        await expect(region({ credentialsFile: creds, configFile: config, profile: 'user' })).resolves.toBe('default-region-in-config');
    });
    test('with profile | us-east-1 is priority 5', async () => {
        const config = `
  [default]

  [profile user]

  `;
        const creds = `
  [default]

  [user]
  `;
        await expect(region({ credentialsFile: creds, configFile: config, profile: 'user' })).resolves.toBe('us-east-1');
    });
    test('without profile | default-region-in-credentials is priority 1', async () => {
        const config = `
  [default]
  region=default-region-in-config

  `;
        const creds = `
  [default]
  region=default-region-in-credentials

  `;
        await expect(region({ credentialsFile: creds, configFile: config })).resolves.toBe('default-region-in-credentials');
    });
    test('without profile | default-region-in-config is priority 2', async () => {
        const config = `
  [default]
  region=default-region-in-config

  `;
        const creds = `
  [default]

  `;
        await expect(region({ credentialsFile: creds, configFile: config })).resolves.toBe('default-region-in-config');
    });
    test('without profile | us-east-1 is priority 3', async () => {
        const config = `
  [default]

  `;
        const creds = `
  [default]

  `;
        await expect(region({ credentialsFile: creds, configFile: config })).resolves.toBe('us-east-1');
    });
});
async function region(opts) {
    const workdir = fs.mkdtempSync(path.join(os.tmpdir(), 'awscli-compatible.test'));
    try {
        if (opts.configFile) {
            const configPath = path.join(workdir, 'config');
            fs.writeFileSync(configPath, opts.configFile);
            process.env.AWS_CONFIG_FILE = configPath;
        }
        if (opts.credentialsFile) {
            const credentialsPath = path.join(workdir, 'credentials');
            fs.writeFileSync(credentialsPath, opts.credentialsFile);
            process.env.AWS_SHARED_CREDENTIALS_FILE = credentialsPath;
        }
        return await awscli_compatible_1.AwsCliCompatible.region(opts.profile);
    }
    finally {
        fs.removeSync(workdir);
    }
}
describe('Session token', () => {
    beforeEach(() => {
        process.env.AWS_ACCESS_KEY_ID = 'foo';
        process.env.AWS_SECRET_ACCESS_KEY = 'bar';
    });
    test('does not mess up with session token env variables if they are undefined', async () => {
        // Making sure these variables are not defined
        delete process.env.AWS_SESSION_TOKEN;
        delete process.env.AMAZON_SESSION_TOKEN;
        await awscli_compatible_1.AwsCliCompatible.credentialChainBuilder();
        expect(process.env.AWS_SESSION_TOKEN).toBeUndefined();
    });
    test('preserves AWS_SESSION_TOKEN if it is defined', async () => {
        process.env.AWS_SESSION_TOKEN = 'aaa';
        delete process.env.AMAZON_SESSION_TOKEN;
        await awscli_compatible_1.AwsCliCompatible.credentialChainBuilder();
        expect(process.env.AWS_SESSION_TOKEN).toEqual('aaa');
    });
    test('assigns AWS_SESSION_TOKEN if it is not defined but AMAZON_SESSION_TOKEN is', async () => {
        delete process.env.AWS_SESSION_TOKEN;
        process.env.AMAZON_SESSION_TOKEN = 'aaa';
        await awscli_compatible_1.AwsCliCompatible.credentialChainBuilder();
        expect(process.env.AWS_SESSION_TOKEN).toEqual('aaa');
    });
    test('preserves AWS_SESSION_TOKEN if both are defined', async () => {
        process.env.AWS_SESSION_TOKEN = 'aaa';
        process.env.AMAZON_SESSION_TOKEN = 'bbb';
        await awscli_compatible_1.AwsCliCompatible.credentialChainBuilder();
        expect(process.env.AWS_SESSION_TOKEN).toEqual('aaa');
    });
});
describe('Session token', () => {
    beforeEach(() => {
        process.env.AWS_ACCESS_KEY_ID = 'foo';
        process.env.AWS_SECRET_ACCESS_KEY = 'bar';
    });
    test('does not mess up with session token env variables if they are undefined', async () => {
        // Making sure these variables are not defined
        delete process.env.AWS_SESSION_TOKEN;
        delete process.env.AMAZON_SESSION_TOKEN;
        await awscli_compatible_1.AwsCliCompatible.credentialChainBuilder();
        expect(process.env.AWS_SESSION_TOKEN).toBeUndefined();
    });
    test('preserves AWS_SESSION_TOKEN if it is defined', async () => {
        process.env.AWS_SESSION_TOKEN = 'aaa';
        delete process.env.AMAZON_SESSION_TOKEN;
        await awscli_compatible_1.AwsCliCompatible.credentialChainBuilder();
        expect(process.env.AWS_SESSION_TOKEN).toEqual('aaa');
    });
    test('assigns AWS_SESSION_TOKEN if it is not defined but AMAZON_SESSION_TOKEN is', async () => {
        delete process.env.AWS_SESSION_TOKEN;
        process.env.AMAZON_SESSION_TOKEN = 'aaa';
        await awscli_compatible_1.AwsCliCompatible.credentialChainBuilder();
        expect(process.env.AWS_SESSION_TOKEN).toEqual('aaa');
    });
    test('preserves AWS_SESSION_TOKEN if both are defined', async () => {
        process.env.AWS_SESSION_TOKEN = 'aaa';
        process.env.AMAZON_SESSION_TOKEN = 'bbb';
        await awscli_compatible_1.AwsCliCompatible.credentialChainBuilder();
        expect(process.env.AWS_SESSION_TOKEN).toEqual('aaa');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzY2xpLWNvbXBhdGlibGUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF3c2NsaS1jb21wYXRpYmxlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLCtCQUErQjtBQUMvQixtRkFBK0U7QUFFL0UsUUFBUSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUV2QyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBRWQsMkRBQTJEO1FBQzNELE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxHQUFHLFdBQVcsQ0FBQztRQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixHQUFHLFdBQVcsQ0FBQztRQUV0RCwwRUFBMEU7UUFDMUUsd0NBQXdDO1FBQ3hDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7UUFDOUIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQztRQUNqQyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUM7UUFDdEMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDO0lBRTNDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDJDQUEyQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBRTNELE1BQU0sTUFBTSxHQUFHOzs7R0FHaEIsQ0FBQztRQUVBLE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ2pGLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGdEQUFnRCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBRWhFLE1BQU0sS0FBSyxHQUFHOzs7R0FHZixDQUFDO1FBRUEsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxD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Q0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw0RUFBNEUsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM1RixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUM7UUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7UUFFekMsTUFBTSxvQ0FBZ0IsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBRWhELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGlEQUFpRCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2pFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO1FBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEdBQUcsS0FBSyxDQUFDO1FBRXpDLE1BQU0sb0NBQWdCLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUVoRCxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB7IEF3c0NsaUNvbXBhdGlibGUgfSBmcm9tICcuLi8uLi8uLi9saWIvYXBpL2F3cy1hdXRoL2F3c2NsaS1jb21wYXRpYmxlJztcblxuZGVzY3JpYmUoJ0F3c0NsaUNvbXBhdGlibGUucmVnaW9uJywgKCkgPT4ge1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuXG4gICAgLy8gbWFrZSBzdXJlIHdlIGRvbid0IG1pc3Rha2VubHkgcG9pbnQgdG8gYW4gdW5yZWxhdGVkIGZpbGVcbiAgICBwcm9jZXNzLmVudi5BV1NfQ09ORklHX0ZJTEUgPSAnL2Rldi9udWxsJztcbiAgICBwcm9jZXNzLmVudi5BV1NfU0hBUkVEX0NSRURFTlRJQUxTX0ZJTEUgPSAnL2Rldi9udWxsJztcblxuICAgIC8vIHRoZXNlIHRha2UgcHJlY2VkZW5jZSBvdmVyIHRoZSBpbmkgZmlsZXMgc28gd2UgbmVlZCB0byBkaXNhYmxlIHRoZW0gZm9yXG4gICAgLy8gdGhlIHRlc3QgdG8gaW52b2tlIHRoZSByaWdodCBmdW5jdGlvblxuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5BV1NfUkVHSU9OO1xuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5BTUFaT05fUkVHSU9OO1xuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5BV1NfREVGQVVMVF9SRUdJT047XG4gICAgZGVsZXRlIHByb2Nlc3MuZW52LkFNQVpPTl9ERUZBVUxUX1JFR0lPTjtcblxuICB9KTtcblxuICB0ZXN0KCdkZWZhdWx0IHJlZ2lvbiBjYW4gYmUgc3BlY2lmaWVkIGluIGNvbmZpZycsIGFzeW5jICgpID0+IHtcblxuICAgIGNvbnN0IGNvbmZpZyA9IGBcbiAgW2RlZmF1bHRdXG4gIHJlZ2lvbj1yZWdpb24taW4tY29uZmlnXG4gIGA7XG5cbiAgICBhd2FpdCBleHBlY3QocmVnaW9uKHsgY29uZmlnRmlsZTogY29uZmlnIH0pKS5yZXNvbHZlcy50b0JlKCdyZWdpb24taW4tY29uZmlnJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2RlZmF1bHQgcmVnaW9uIGNhbiBiZSBzcGVjaWZpZWQgaW4gY3JlZGVudGlhbHMnLCBhc3luYyAoKSA9PiB7XG5cbiAgICBjb25zdCBjcmVkcyA9IGBcbiAgW2RlZmF1bHRdXG4gIHJlZ2lvbj1yZWdpb24taW4tY3JlZGVudGlhbHNcbiAgYDtcblxuICAgIGF3YWl0IGV4cGVjdChyZWdpb24oeyBjcmVkZW50aWFsc0ZpbGU6IGNyZWRzIH0pKS5yZXNvbHZlcy50b0JlKCdyZWdpb24taW4tY3JlZGVudGlhbHMnKTtcblxuICB9KTtcblxuICB0ZXN0KCdwcm9maWxlIHJlZ2lvbiBjYW4gYmUgc3BlY2lmaWVkIGluIGNvbmZpZycsIGFzeW5jICgpID0+IHtcblxuICAgIGNvbnN0IGNvbmZpZyA9IGBcbiAgW3Byb2ZpbGUgdXNlcjFdXG4gIHJlZ2lvbj1yZWdpb24taW4tY29uZmlnXG4gIGA7XG5cbiAgICBhd2FpdCBleHBlY3QocmVnaW9uKHsgY29uZmlnRmlsZTogY29uZmlnLCBwcm9maWxlOiAndXNlcjEnIH0pKS5yZXNvbHZlcy50b0JlKCdyZWdpb24taW4tY29uZmlnJyk7XG5cbiAgfSk7XG5cbiAgdGVzdCgncHJvZmlsZSByZWdpb24gY2FuIGJlIHNwZWNpZmllZCBpbiBjcmVkZW50aWFscycsIGFzeW5jICgpID0+IHtcblxuICAgIGNvbnN0IGNyZWRzID0gYFxuICBbdXNlcjFdXG4gIHJlZ2lvbj1yZWdpb24taW4tY3JlZGVudGlhbHNcbiAgYDtcblxuICAgIGF3YWl0IGV4cGVjdChyZWdpb24oeyBjcmVkZW50aWFsc0ZpbGU6IGNyZWRzLCBwcm9maWxlOiAndXNlcjEnIH0pKS5yZXNvbHZlcy50b0JlKCdyZWdpb24taW4tY3JlZGVudGlhbHMnKTtcblxuICB9KTtcblxuICB0ZXN0KCd3aXRoIHByb2ZpbGUgfCBwcm9maWxlLXJlZ2lvbi1pbi1jcmVkZW50aWFscyBpcyBwcmlvcml0eSAxJywgYXN5bmMgKCkgPT4ge1xuXG4gICAgY29uc3QgY29uZmlnID0gYFxuICBbZGVmYXVsdF1cbiAgcmVnaW9uPWRlZmF1bHQtcmVnaW9uLWluLWNvbmZpZ1xuXG4gIFtwcm9maWxlIHVzZXJdXG4gIHJlZ2lvbj1wcm9maWxlLXJlZ2lvbi1pbi1jb25maWdcblxuICBgO1xuXG4gICAgY29uc3QgY3JlZHMgPSBgXG4gIFtkZWZhdWx0XVxuICByZWdpb249ZGVmYXVsdC1yZWdpb24taW4tY3JlZGVudGlhbHNcblxuICBbdXNlcl1cbiAgcmVnaW9uPXByb2ZpbGUtcmVnaW9uLWluLWNyZWRlbnRpYWxzXG4gIGA7XG5cbiAgICBhd2FpdCBleHBlY3QocmVnaW9uKHsgY3JlZGVudGlhbHNGaWxlOiBjcmVkcywgY29uZmlnRmlsZTogY29uZmlnLCBwcm9maWxlOiAndXNlcicgfSkpLnJlc29sdmVzLnRvQmUoJ3Byb2ZpbGUtcmVnaW9uLWluLWNyZWRlbnRpYWxzJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ3dpdGggcHJvZmlsZSB8IHByb2ZpbGUtcmVnaW9uLWluLWNvbmZpZyBpcyBwcmlvcml0eSAyJywgYXN5bmMgKCkgPT4ge1xuXG4gICAgY29uc3QgY29uZmlnID0gYFxuICBbZGVmYXVsdF1cbiAgcmVnaW9uPWRlZmF1bHQtcmVnaW9uLWluLWNvbmZpZ1xuXG4gIFtwcm9maWxlIHVzZXJdXG4gIHJlZ2lvbj1wcm9maWxlLXJlZ2lvbi1pbi1jb25maWdcblxuICBgO1xuXG4gICAgY29uc3QgY3JlZHMgPSBgXG4gIFtkZWZhdWx0XVxuICByZWdpb249ZGVmYXVsdC1yZWdpb24taW4tY3JlZGVudGlhbHNcblxuICBbdXNlcl1cbiAgYDtcblxuICAgIGF3YWl0IGV4cGVjdChyZWdpb24oeyBjcmVkZW50aWFsc0ZpbGU6IGNyZWRzLCBjb25maWdGaWxlOiBjb25maWcsIHByb2ZpbGU6ICd1c2VyJyB9KSkucmVzb2x2ZXMudG9CZSgncHJvZmlsZS1yZWdpb24taW4tY29uZmlnJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ3dpdGggcHJvZmlsZSB8IGRlZmF1bHQtcmVnaW9uLWluLWNyZWRlbnRpYWxzIGlzIHByaW9yaXR5IDMnLCBhc3luYyAoKSA9PiB7XG5cbiAgICBjb25zdCBjb25maWcgPSBgXG4gIFtkZWZhdWx0XVxuICByZWdpb249ZGVmYXVsdC1yZWdpb24taW4tY29uZmlnXG5cbiAgW3Byb2ZpbGUgdXNlcl1cblxuICBgO1xuXG4gICAgY29uc3QgY3JlZHMgPSBgXG4gIFtkZWZhdWx0XVxuICByZWdpb249ZGVmYXVsdC1yZWdpb24taW4tY3JlZGVudGlhbHNcblxuICBbdXNlcl1cbiAgYDtcblxuICAgIGF3YWl0IGV4cGVjdChyZWdpb24oeyBjcmVkZW50aWFsc0ZpbGU6IGNyZWRzLCBjb25maWdGaWxlOiBjb25maWcsIHByb2ZpbGU6ICd1c2VyJyB9KSkucmVzb2x2ZXMudG9CZSgnZGVmYXVsdC1yZWdpb24taW4tY3JlZGVudGlhbHMnKTtcbiAgfSk7XG5cbiAgdGVzdCgnd2l0aCBwcm9maWxlIHwgZGVmYXVsdC1yZWdpb24taW4tY29uZmlnIGlzIHByaW9yaXR5IDQnLCBhc3luYyAoKSA9PiB7XG5cbiAgICBjb25zdCBjb25maWcgPSBgXG4gIFtkZWZhdWx0XVxuICByZWdpb249ZGVmYXVsdC1yZWdpb24taW4tY29uZmlnXG5cbiAgW3Byb2ZpbGUgdXNlcl1cblxuICBgO1xuXG4gICAgY29uc3QgY3JlZHMgPSBgXG4gIFtkZWZhdWx0XVxuXG4gIFt1c2VyXVxuICBgO1xuXG4gICAgYXdhaXQgZXhwZWN0KHJlZ2lvbih7IGNyZWRlbnRpYWxzRmlsZTogY3JlZHMsIGNvbmZpZ0ZpbGU6IGNvbmZpZywgcHJvZmlsZTogJ3VzZXInIH0pKS5yZXNvbHZlcy50b0JlKCdkZWZhdWx0LXJlZ2lvbi1pbi1jb25maWcnKTtcbiAgfSk7XG5cbiAgdGVzdCgnd2l0aCBwcm9maWxlIHwgdXMtZWFzdC0xIGlzIHByaW9yaXR5IDUnLCBhc3luYyAoKSA9PiB7XG5cbiAgICBjb25zdCBjb25maWcgPSBgXG4gIFtkZWZhdWx0XVxuXG4gIFtwcm9maWxlIHVzZXJdXG5cbiAgYDtcblxuICAgIGNvbnN0IGNyZWRzID0gYFxuICBbZGVmYXVsdF1cblxuICBbdXNlcl1cbiAgYDtcblxuICAgIGF3YWl0IGV4cGVjdChyZWdpb24oeyBjcmVkZW50aWFsc0ZpbGU6IGNyZWRzLCBjb25maWdGaWxlOiBjb25maWcsIHByb2ZpbGU6ICd1c2VyJyB9KSkucmVzb2x2ZXMudG9CZSgndXMtZWFzdC0xJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ3dpdGhvdXQgcHJvZmlsZSB8IGRlZmF1bHQtcmVnaW9uLWluLWNyZWRlbnRpYWxzIGlzIHByaW9yaXR5IDEnLCBhc3luYyAoKSA9PiB7XG5cbiAgICBjb25zdCBjb25maWcgPSBgXG4gIFtkZWZhdWx0XVxuICByZWdpb249ZGVmYXVsdC1yZWdpb24taW4tY29uZmlnXG5cbiAgYDtcblxuICAgIGNvbnN0IGNyZWRzID0gYFxuICBbZGVmYXVsdF1cbiAgcmVnaW9uPWRlZmF1bHQtcmVnaW9uLWluLWNyZWRlbnRpYWxzXG5cbiAgYDtcblxuICAgIGF3YWl0IGV4cGVjdChyZWdpb24oeyBjcmVkZW50aWFsc0ZpbGU6IGNyZWRzLCBjb25maWdGaWxlOiBjb25maWcgfSkpLnJlc29sdmVzLnRvQmUoJ2RlZmF1bHQtcmVnaW9uLWluLWNyZWRlbnRpYWxzJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ3dpdGhvdXQgcHJvZmlsZSB8IGRlZmF1bHQtcmVnaW9uLWluLWNvbmZpZyBpcyBwcmlvcml0eSAyJywgYXN5bmMgKCkgPT4ge1xuXG4gICAgY29uc3QgY29uZmlnID0gYFxuICBbZGVmYXVsdF1cbiAgcmVnaW9uPWRlZmF1bHQtcmVnaW9uLWluLWNvbmZpZ1xuXG4gIGA7XG5cbiAgICBjb25zdCBjcmVkcyA9IGBcbiAgW2RlZmF1bHRdXG5cbiAgYDtcblxuICAgIGF3YWl0IGV4cGVjdChyZWdpb24oeyBjcmVkZW50aWFsc0ZpbGU6IGNyZWRzLCBjb25maWdGaWxlOiBjb25maWcgfSkpLnJlc29sdmVzLnRvQmUoJ2RlZmF1bHQtcmVnaW9uLWluLWNvbmZpZycpO1xuICB9KTtcblxuICB0ZXN0KCd3aXRob3V0IHByb2ZpbGUgfCB1cy1lYXN0LTEgaXMgcHJpb3JpdHkgMycsIGFzeW5jICgpID0+IHtcblxuICAgIGNvbnN0IGNvbmZpZyA9IGBcbiAgW2RlZmF1bHRdXG5cbiAgYDtcblxuICAgIGNvbnN0IGNyZWRzID0gYFxuICBbZGVmYXVsdF1cblxuICBgO1xuXG4gICAgYXdhaXQgZXhwZWN0KHJlZ2lvbih7IGNyZWRlbnRpYWxzRmlsZTogY3JlZHMsIGNvbmZpZ0ZpbGU6IGNvbmZpZyB9KSkucmVzb2x2ZXMudG9CZSgndXMtZWFzdC0xJyk7XG4gIH0pO1xuXG59KTtcblxuYXN5bmMgZnVuY3Rpb24gcmVnaW9uKG9wdHM6IHtcbiAgcmVhZG9ubHkgY29uZmlnRmlsZT86IHN0cmluZztcbiAgcmVhZG9ubHkgY3JlZGVudGlhbHNGaWxlPzogc3RyaW5nO1xuICByZWFkb25seSBwcm9maWxlPzogc3RyaW5nO1xufSkge1xuXG4gIGNvbnN0IHdvcmtkaXIgPSBmcy5ta2R0ZW1wU3luYyhwYXRoLmpvaW4ob3MudG1wZGlyKCksICdhd3NjbGktY29tcGF0aWJsZS50ZXN0JykpO1xuXG4gIHRyeSB7XG5cbiAgICBpZiAob3B0cy5jb25maWdGaWxlKSB7XG4gICAgICBjb25zdCBjb25maWdQYXRoID0gcGF0aC5qb2luKHdvcmtkaXIsICdjb25maWcnKTtcbiAgICAgIGZzLndyaXRlRmlsZVN5bmMoY29uZmlnUGF0aCwgb3B0cy5jb25maWdGaWxlKTtcbiAgICAgIHByb2Nlc3MuZW52LkFXU19DT05GSUdfRklMRSA9IGNvbmZpZ1BhdGg7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuY3JlZGVudGlhbHNGaWxlKSB7XG4gICAgICBjb25zdCBjcmVkZW50aWFsc1BhdGggPSBwYXRoLmpvaW4od29ya2RpciwgJ2NyZWRlbnRpYWxzJyk7XG4gICAgICBmcy53cml0ZUZpbGVTeW5jKGNyZWRlbnRpYWxzUGF0aCwgb3B0cy5jcmVkZW50aWFsc0ZpbGUpO1xuICAgICAgcHJvY2Vzcy5lbnYuQVdTX1NIQVJFRF9DUkVERU5USUFMU19GSUxFID0gY3JlZGVudGlhbHNQYXRoO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCBBd3NDbGlDb21wYXRpYmxlLnJlZ2lvbihvcHRzLnByb2ZpbGUpO1xuXG4gIH0gZmluYWxseSB7XG4gICAgZnMucmVtb3ZlU3luYyh3b3JrZGlyKTtcbiAgfVxufVxuXG5kZXNjcmliZSgnU2Vzc2lvbiB0b2tlbicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuQVdTX0FDQ0VTU19LRVlfSUQgPSAnZm9vJztcbiAgICBwcm9jZXNzLmVudi5BV1NfU0VDUkVUX0FDQ0VTU19LRVkgPSAnYmFyJztcbiAgfSk7XG5cbiAgdGVzdCgnZG9lcyBub3QgbWVzcyB1cCB3aXRoIHNlc3Npb24gdG9rZW4gZW52IHZhcmlhYmxlcyBpZiB0aGV5IGFyZSB1bmRlZmluZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gTWFraW5nIHN1cmUgdGhlc2UgdmFyaWFibGVzIGFyZSBub3QgZGVmaW5lZFxuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5BV1NfU0VTU0lPTl9UT0tFTjtcbiAgICBkZWxldGUgcHJvY2Vzcy5lbnYuQU1BWk9OX1NFU1NJT05fVE9LRU47XG5cbiAgICBhd2FpdCBBd3NDbGlDb21wYXRpYmxlLmNyZWRlbnRpYWxDaGFpbkJ1aWxkZXIoKTtcblxuICAgIGV4cGVjdChwcm9jZXNzLmVudi5BV1NfU0VTU0lPTl9UT0tFTikudG9CZVVuZGVmaW5lZCgpO1xuICB9KTtcblxuICB0ZXN0KCdwcmVzZXJ2ZXMgQVdTX1NFU1NJT05fVE9LRU4gaWYgaXQgaXMgZGVmaW5lZCcsIGFzeW5jICgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5BV1NfU0VTU0lPTl9UT0tFTiA9ICdhYWEnO1xuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5BTUFaT05fU0VTU0lPTl9UT0tFTjtcblxuICAgIGF3YWl0IEF3c0NsaUNvbXBhdGlibGUuY3JlZGVudGlhbENoYWluQnVpbGRlcigpO1xuXG4gICAgZXhwZWN0KHByb2Nlc3MuZW52LkFXU19TRVNTSU9OX1RPS0VOKS50b0VxdWFsKCdhYWEnKTtcbiAgfSk7XG5cbiAgdGVzdCgnYXNzaWducyBBV1NfU0VTU0lPTl9UT0tFTiBpZiBpdCBpcyBub3QgZGVmaW5lZCBidXQgQU1BWk9OX1NFU1NJT05fVE9LRU4gaXMnLCBhc3luYyAoKSA9PiB7XG4gICAgZGVsZXRlIHByb2Nlc3MuZW52LkFXU19TRVNTSU9OX1RPS0VOO1xuICAgIHByb2Nlc3MuZW52LkFNQVpPTl9TRVNTSU9OX1RPS0VOID0gJ2FhYSc7XG5cbiAgICBhd2FpdCBBd3NDbGlDb21wYXRpYmxlLmNyZWRlbnRpYWxDaGFpbkJ1aWxkZXIoKTtcblxuICAgIGV4cGVjdChwcm9jZXNzLmVudi5BV1NfU0VTU0lPTl9UT0tFTikudG9FcXVhbCgnYWFhJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ3ByZXNlcnZlcyBBV1NfU0VTU0lPTl9UT0tFTiBpZiBib3RoIGFyZSBkZWZpbmVkJywgYXN5bmMgKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52LkFXU19TRVNTSU9OX1RPS0VOID0gJ2FhYSc7XG4gICAgcHJvY2Vzcy5lbnYuQU1BWk9OX1NFU1NJT05fVE9LRU4gPSAnYmJiJztcblxuICAgIGF3YWl0IEF3c0NsaUNvbXBhdGlibGUuY3JlZGVudGlhbENoYWluQnVpbGRlcigpO1xuXG4gICAgZXhwZWN0KHByb2Nlc3MuZW52LkFXU19TRVNTSU9OX1RPS0VOKS50b0VxdWFsKCdhYWEnKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ1Nlc3Npb24gdG9rZW4nLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52LkFXU19BQ0NFU1NfS0VZX0lEID0gJ2Zvbyc7XG4gICAgcHJvY2Vzcy5lbnYuQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZID0gJ2Jhcic7XG4gIH0pO1xuXG4gIHRlc3QoJ2RvZXMgbm90IG1lc3MgdXAgd2l0aCBzZXNzaW9uIHRva2VuIGVudiB2YXJpYWJsZXMgaWYgdGhleSBhcmUgdW5kZWZpbmVkJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIE1ha2luZyBzdXJlIHRoZXNlIHZhcmlhYmxlcyBhcmUgbm90IGRlZmluZWRcbiAgICBkZWxldGUgcHJvY2Vzcy5lbnYuQVdTX1NFU1NJT05fVE9LRU47XG4gICAgZGVsZXRlIHByb2Nlc3MuZW52LkFNQVpPTl9TRVNTSU9OX1RPS0VOO1xuXG4gICAgYXdhaXQgQXdzQ2xpQ29tcGF0aWJsZS5jcmVkZW50aWFsQ2hhaW5CdWlsZGVyKCk7XG5cbiAgICBleHBlY3QocHJvY2Vzcy5lbnYuQVdTX1NFU1NJT05fVE9LRU4pLnRvQmVVbmRlZmluZWQoKTtcbiAgfSk7XG5cbiAgdGVzdCgncHJlc2VydmVzIEFXU19TRVNTSU9OX1RPS0VOIGlmIGl0IGlzIGRlZmluZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuQVdTX1NFU1NJT05fVE9LRU4gPSAnYWFhJztcbiAgICBkZWxldGUgcHJvY2Vzcy5lbnYuQU1BWk9OX1NFU1NJT05fVE9LRU47XG5cbiAgICBhd2FpdCBBd3NDbGlDb21wYXRpYmxlLmNyZWRlbnRpYWxDaGFpbkJ1aWxkZXIoKTtcblxuICAgIGV4cGVjdChwcm9jZXNzLmVudi5BV1NfU0VTU0lPTl9UT0tFTikudG9FcXVhbCgnYWFhJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Fzc2lnbnMgQVdTX1NFU1NJT05fVE9LRU4gaWYgaXQgaXMgbm90IGRlZmluZWQgYnV0IEFNQVpPTl9TRVNTSU9OX1RPS0VOIGlzJywgYXN5bmMgKCkgPT4ge1xuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5BV1NfU0VTU0lPTl9UT0tFTjtcbiAgICBwcm9jZXNzLmVudi5BTUFaT05fU0VTU0lPTl9UT0tFTiA9ICdhYWEnO1xuXG4gICAgYXdhaXQgQXdzQ2xpQ29tcGF0aWJsZS5jcmVkZW50aWFsQ2hhaW5CdWlsZGVyKCk7XG5cbiAgICBleHBlY3QocHJvY2Vzcy5lbnYuQVdTX1NFU1NJT05fVE9LRU4pLnRvRXF1YWwoJ2FhYScpO1xuICB9KTtcblxuICB0ZXN0KCdwcmVzZXJ2ZXMgQVdTX1NFU1NJT05fVE9LRU4gaWYgYm90aCBhcmUgZGVmaW5lZCcsIGFzeW5jICgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5BV1NfU0VTU0lPTl9UT0tFTiA9ICdhYWEnO1xuICAgIHByb2Nlc3MuZW52LkFNQVpPTl9TRVNTSU9OX1RPS0VOID0gJ2JiYic7XG5cbiAgICBhd2FpdCBBd3NDbGlDb21wYXRpYmxlLmNyZWRlbnRpYWxDaGFpbkJ1aWxkZXIoKTtcblxuICAgIGV4cGVjdChwcm9jZXNzLmVudi5BV1NfU0VTU0lPTl9UT0tFTikudG9FcXVhbCgnYWFhJyk7XG4gIH0pO1xufSk7Il19