"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_1 = require("../../../lib/api/plugin/plugin");
(0, plugin_1.markTesting)();
beforeEach(() => {
    jest.resetModules();
});
const THE_PLUGIN = 'the-plugin';
test('load a plugin using the PluginHost', () => {
    const host = new plugin_1.PluginHost();
    jest.mock(THE_PLUGIN, () => {
        return {
            version: '1',
            init() {
            },
        };
    }, { virtual: true });
    host.load(THE_PLUGIN);
});
test('fail to load a plugin using the PluginHost', () => {
    const host = new plugin_1.PluginHost();
    // This is not a plugin
    jest.mock(THE_PLUGIN, () => {
        return {};
    }, { virtual: true });
    expect(() => host.load(THE_PLUGIN)).toThrow(/Unable to load plug-in/);
});
test('plugin that registers a Credential Provider', () => {
    const host = new plugin_1.PluginHost();
    jest.mock(THE_PLUGIN, () => {
        return {
            version: '1',
            init(h) {
                h.registerCredentialProviderSource({
                    canProvideCredentials() { return Promise.resolve(false); },
                    name: 'test',
                    isAvailable() { return Promise.resolve(false); },
                    getProvider() { return Promise.reject('Dont call me'); },
                });
            },
        };
    }, { virtual: true });
    host.load(THE_PLUGIN);
    expect(host.credentialProviderSources).toHaveLength(1);
});
test('plugin that registers a Context Provider', () => {
    const host = new plugin_1.PluginHost();
    jest.mock(THE_PLUGIN, () => {
        return {
            version: '1',
            init(h) {
                h.registerContextProviderAlpha('name', {
                    getValue(_args) {
                        return Promise.resolve('asdf');
                    },
                });
            },
        };
    }, { virtual: true });
    host.load(THE_PLUGIN);
    expect(Object.keys(host.contextProviderPlugins)).toHaveLength(1);
});
test('plugin that registers an invalid Context Provider throws', () => {
    const host = new plugin_1.PluginHost();
    jest.mock(THE_PLUGIN, () => {
        return {
            version: '1',
            init(h) {
                h.registerContextProviderAlpha('name', {});
            },
        };
    }, { virtual: true });
    expect(() => host.load(THE_PLUGIN)).toThrow(/does not look like a ContextProviderPlugin/);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLWhvc3QudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBsdWdpbi1ob3N0LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSwyREFBeUU7QUFFekUsSUFBQSxvQkFBVyxHQUFFLENBQUM7QUFFZCxVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3RCLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDO0FBRWhDLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLEVBQUU7SUFDOUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxtQkFBVSxFQUFFLENBQUM7SUFFOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO1FBQ3pCLE9BQU87WUFDTCxPQUFPLEVBQUUsR0FBRztZQUNaLElBQUk7WUFDSixDQUFDO1NBQ0YsQ0FBQztJQUNKLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXRCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDeEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsNENBQTRDLEVBQUUsR0FBRyxFQUFFO0lBQ3RELE1BQU0sSUFBSSxHQUFHLElBQUksbUJBQVUsRUFBRSxDQUFDO0lBRTlCLHVCQUF1QjtJQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7UUFDekIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUV0QixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ3hFLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDZDQUE2QyxFQUFFLEdBQUcsRUFBRTtJQUN2RCxNQUFNLElBQUksR0FBRyxJQUFJLG1CQUFVLEVBQUUsQ0FBQztJQUU5QixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7UUFDekIsT0FBTztZQUNMLE9BQU8sRUFBRSxHQUFHO1lBQ1osSUFBSSxDQUFDLENBQWE7Z0JBQ2hCLENBQUMsQ0FBQyxnQ0FBZ0MsQ0FBQztvQkFDakMscUJBQXFCLEtBQUssT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDMUQsSUFBSSxFQUFFLE1BQU07b0JBQ1osV0FBVyxLQUFLLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2hELFdBQVcsS0FBSyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN0QixDQUFDLENBQUM7WUFFeEMsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUV0QixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRXRCLE1BQU0sQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO0lBQ3BELE1BQU0sSUFBSSxHQUFHLElBQUksbUJBQVUsRUFBRSxDQUFDO0lBRTlCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtRQUN6QixPQUFPO1lBQ0wsT0FBTyxFQUFFLEdBQUc7WUFDWixJQUFJLENBQUMsQ0FBYTtnQkFDaEIsQ0FBQyxDQUFDLDRCQUE0QixDQUFDLE1BQU0sRUFBRTtvQkFDckMsUUFBUSxDQUFDLEtBQTBCO3dCQUNqQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ2pDLENBQUM7aUJBQzhCLENBQUMsQ0FBQztZQUNyQyxDQUFDO1NBQ0YsQ0FBQztJQUNKLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXRCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFdEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkUsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsMERBQTBELEVBQUUsR0FBRyxFQUFFO0lBQ3BFLE1BQU0sSUFBSSxHQUFHLElBQUksbUJBQVUsRUFBRSxDQUFDO0lBRTlCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtRQUN6QixPQUFPO1lBQ0wsT0FBTyxFQUFFLEdBQUc7WUFDWixJQUFJLENBQUMsQ0FBYTtnQkFDaEIsQ0FBQyxDQUFDLDRCQUE0QixDQUFDLE1BQU0sRUFBRSxFQUFTLENBQUMsQ0FBQztZQUNwRCxDQUFDO1NBQ0YsQ0FBQztJQUNKLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXRCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7QUFDNUYsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250ZXh0UHJvdmlkZXJQbHVnaW4gfSBmcm9tICcuLi8uLi8uLi9saWIvYXBpL3BsdWdpbi9jb250ZXh0LXByb3ZpZGVyLXBsdWdpbic7XG5pbXBvcnQgeyBDcmVkZW50aWFsUHJvdmlkZXJTb3VyY2UgfSBmcm9tICcuLi8uLi8uLi9saWIvYXBpL3BsdWdpbi9jcmVkZW50aWFsLXByb3ZpZGVyLXNvdXJjZSc7XG5pbXBvcnQgeyBQbHVnaW5Ib3N0LCBtYXJrVGVzdGluZyB9IGZyb20gJy4uLy4uLy4uL2xpYi9hcGkvcGx1Z2luL3BsdWdpbic7XG5cbm1hcmtUZXN0aW5nKCk7XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBqZXN0LnJlc2V0TW9kdWxlcygpO1xufSk7XG5cbmNvbnN0IFRIRV9QTFVHSU4gPSAndGhlLXBsdWdpbic7XG5cbnRlc3QoJ2xvYWQgYSBwbHVnaW4gdXNpbmcgdGhlIFBsdWdpbkhvc3QnLCAoKSA9PiB7XG4gIGNvbnN0IGhvc3QgPSBuZXcgUGx1Z2luSG9zdCgpO1xuXG4gIGplc3QubW9jayhUSEVfUExVR0lOLCAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZlcnNpb246ICcxJyxcbiAgICAgIGluaXQoKSB7XG4gICAgICB9LFxuICAgIH07XG4gIH0sIHsgdmlydHVhbDogdHJ1ZSB9KTtcblxuICBob3N0LmxvYWQoVEhFX1BMVUdJTik7XG59KTtcblxudGVzdCgnZmFpbCB0byBsb2FkIGEgcGx1Z2luIHVzaW5nIHRoZSBQbHVnaW5Ib3N0JywgKCkgPT4ge1xuICBjb25zdCBob3N0ID0gbmV3IFBsdWdpbkhvc3QoKTtcblxuICAvLyBUaGlzIGlzIG5vdCBhIHBsdWdpblxuICBqZXN0Lm1vY2soVEhFX1BMVUdJTiwgKCkgPT4ge1xuICAgIHJldHVybiB7fTtcbiAgfSwgeyB2aXJ0dWFsOiB0cnVlIH0pO1xuXG4gIGV4cGVjdCgoKSA9PiBob3N0LmxvYWQoVEhFX1BMVUdJTikpLnRvVGhyb3coL1VuYWJsZSB0byBsb2FkIHBsdWctaW4vKTtcbn0pO1xuXG50ZXN0KCdwbHVnaW4gdGhhdCByZWdpc3RlcnMgYSBDcmVkZW50aWFsIFByb3ZpZGVyJywgKCkgPT4ge1xuICBjb25zdCBob3N0ID0gbmV3IFBsdWdpbkhvc3QoKTtcblxuICBqZXN0Lm1vY2soVEhFX1BMVUdJTiwgKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB2ZXJzaW9uOiAnMScsXG4gICAgICBpbml0KGg6IFBsdWdpbkhvc3QpIHtcbiAgICAgICAgaC5yZWdpc3RlckNyZWRlbnRpYWxQcm92aWRlclNvdXJjZSh7XG4gICAgICAgICAgY2FuUHJvdmlkZUNyZWRlbnRpYWxzKCkgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTsgfSxcbiAgICAgICAgICBuYW1lOiAndGVzdCcsXG4gICAgICAgICAgaXNBdmFpbGFibGUoKSB7IHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpOyB9LFxuICAgICAgICAgIGdldFByb3ZpZGVyKCkgeyByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0RvbnQgY2FsbCBtZScpOyB9LFxuICAgICAgICB9IHNhdGlzZmllcyBDcmVkZW50aWFsUHJvdmlkZXJTb3VyY2UpO1xuXG4gICAgICB9LFxuICAgIH07XG4gIH0sIHsgdmlydHVhbDogdHJ1ZSB9KTtcblxuICBob3N0LmxvYWQoVEhFX1BMVUdJTik7XG5cbiAgZXhwZWN0KGhvc3QuY3JlZGVudGlhbFByb3ZpZGVyU291cmNlcykudG9IYXZlTGVuZ3RoKDEpO1xufSk7XG5cbnRlc3QoJ3BsdWdpbiB0aGF0IHJlZ2lzdGVycyBhIENvbnRleHQgUHJvdmlkZXInLCAoKSA9PiB7XG4gIGNvbnN0IGhvc3QgPSBuZXcgUGx1Z2luSG9zdCgpO1xuXG4gIGplc3QubW9jayhUSEVfUExVR0lOLCAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZlcnNpb246ICcxJyxcbiAgICAgIGluaXQoaDogUGx1Z2luSG9zdCkge1xuICAgICAgICBoLnJlZ2lzdGVyQ29udGV4dFByb3ZpZGVyQWxwaGEoJ25hbWUnLCB7XG4gICAgICAgICAgZ2V0VmFsdWUoX2FyZ3M6IFJlY29yZDxzdHJpbmcsIGFueT4pIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoJ2FzZGYnKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9IHNhdGlzZmllcyBDb250ZXh0UHJvdmlkZXJQbHVnaW4pO1xuICAgICAgfSxcbiAgICB9O1xuICB9LCB7IHZpcnR1YWw6IHRydWUgfSk7XG5cbiAgaG9zdC5sb2FkKFRIRV9QTFVHSU4pO1xuXG4gIGV4cGVjdChPYmplY3Qua2V5cyhob3N0LmNvbnRleHRQcm92aWRlclBsdWdpbnMpKS50b0hhdmVMZW5ndGgoMSk7XG59KTtcblxudGVzdCgncGx1Z2luIHRoYXQgcmVnaXN0ZXJzIGFuIGludmFsaWQgQ29udGV4dCBQcm92aWRlciB0aHJvd3MnLCAoKSA9PiB7XG4gIGNvbnN0IGhvc3QgPSBuZXcgUGx1Z2luSG9zdCgpO1xuXG4gIGplc3QubW9jayhUSEVfUExVR0lOLCAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZlcnNpb246ICcxJyxcbiAgICAgIGluaXQoaDogUGx1Z2luSG9zdCkge1xuICAgICAgICBoLnJlZ2lzdGVyQ29udGV4dFByb3ZpZGVyQWxwaGEoJ25hbWUnLCB7fSBhcyBhbnkpO1xuICAgICAgfSxcbiAgICB9O1xuICB9LCB7IHZpcnR1YWw6IHRydWUgfSk7XG5cbiAgZXhwZWN0KCgpID0+IGhvc3QubG9hZChUSEVfUExVR0lOKSkudG9UaHJvdygvZG9lcyBub3QgbG9vayBsaWtlIGEgQ29udGV4dFByb3ZpZGVyUGx1Z2luLyk7XG59KTsiXX0=